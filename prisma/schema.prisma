// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(384)
  users User[]
}

// Prisma tables
model Message {
  id         BigInt   @id @unique @default(autoincrement())
  authorId   String   @default("NOT_ASSIGNED") @db.VarChar(384)
  content    String   @db.VarChar(384)
  createdAt  DateTime @default(now())
  clientUUID String   @db.VarChar(384)
  roomId     BigInt   @db.BigInt

  author User @relation(fields: [authorId], references: [id])
  room   Room @relation(fields: [roomId], references: [id])
}

model Account {
  id                String  @id @default(cuid()) @db.VarChar(384)
  userId            String  @db.VarChar(384)
  type              String  @db.VarChar(384)
  provider          String  @db.VarChar(384)
  providerAccountId String  @db.VarChar(384)
  refresh_token     String? @db.VarChar(384)
  access_token      String? @db.VarChar(384)
  expires_at        Int?
  token_type        String? @db.VarChar(384)
  scope             String? @db.VarChar(384)
  id_token          String? @db.VarChar(10000)
  session_state     String? @db.VarChar(384)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @db.VarChar(384)
  sessionToken String   @unique @db.VarChar(384)
  userId       String   @db.VarChar(384)
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?   @db.VarChar(384)
  email         String?   @unique
  emailVerified DateTime?
  image         String?   @db.VarChar(384)
  messages      Message[]
  roles         Role[]
  accounts      Account[]
  sessions      Session[]
  channelId     String?   @db.VarChar(384)
  rooms         Room[]
}

model AdminUser {
  id     BigInt @id @default(autoincrement())
  userId String
  roomId BigInt

  room Room? @relation(fields: [roomId], references: [id])
}

model ActiveUser {
  id     BigInt @id @default(autoincrement())
  userId String
  roomId BigInt

  room Room @relation(fields: [roomId], references: [id])
}

model VerificationToken {
  identifier String   @db.VarChar(384)
  token      String   @unique @db.VarChar(384)
  expires    DateTime

  @@unique([identifier, token])
}

model RoomPrivateKey {
  id     BigInt @id @default(autoincrement())
  key    String @unique @db.VarChar(384)
  roomId BigInt @db.BigInt

  room Room @relation(fields: [roomId], references: [id])
}

model Room {
  id               BigInt           @id @unique @default(autoincrement())
  ownerId          String
  isPrivate        Boolean
  name             String           @db.VarChar(384)
  admins           AdminUser[]
  activeUsers      ActiveUser[]
  messages         Message[]
  privateKey       RoomPrivateKey[]

  owner User @relation(fields: [ownerId], references: [id])

  @@index([name])
}
